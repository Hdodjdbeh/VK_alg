#include <iostream>
#include <cassert>
#include <sstream>
#include <queue>
#include <vector>
#include <functional>

#include "i_graph.hpp"
#include "list_graph.hpp"
#include "matrix_graph.hpp"
#include "set_graph.hpp"
#include "arc_graph.hpp"

using namespace std;
void BFS(const IGraph& graph, int vertex, vector<bool>& visited, const function<void(int)>& func)
{
    queue<int> qu;
    qu.push(vertex);
    visited[vertex] = true;

    while (!qu.empty())
    {
        int currentVertex = qu.front();
        qu.pop();

        func(currentVertex);

        for (int nextVertex : graph.GetNextVertices(currentVertex))
        {
            if (!visited[nextVertex])
            {
                visited[nextVertex] = true;
                qu.push(nextVertex);
            }
        }
    }
}

void mainBFS(const IGraph& graph, const function<void(int)>& func)
{
    vector<bool> visited(graph.VerticesCount(), false);

    for (int i = 0; i < graph.VerticesCount(); ++i)
    {
        if (!visited[i])
        {
            BFS(graph, i, visited, func);
        }
    }
}

void DFS(const IGraph& graph, int vertex, vector<bool>& visited, const function<void(int)>& func)
{
    visited[vertex] = true;
    func(vertex);

    for (int nextVertex : graph.GetNextVertices(vertex))
    {
        if (!visited[nextVertex])
        {
            DFS(graph, nextVertex, visited, func);
        }
    }
}

void mainDFS(const IGraph& graph, const function<void(int)>& func)
{
    vector<bool> visited(graph.VerticesCount(), false);

    for (int i = 0; i < graph.VerticesCount(); ++i)
    {
        if (!visited[i])
        {
            DFS(graph, i, visited, func);
        }
    }
}




int main(int argc, const char* argv[]) {
    ListGraph listGraph(7);
    listGraph.AddEdge(0, 1);
    listGraph.AddEdge(0, 5);
    listGraph.AddEdge(1, 2);
    listGraph.AddEdge(1, 3);
    listGraph.AddEdge(1, 5);
    listGraph.AddEdge(1, 6);
    listGraph.AddEdge(3, 2);
    listGraph.AddEdge(3, 4);
    listGraph.AddEdge(3, 6);
    listGraph.AddEdge(5, 4);
    listGraph.AddEdge(5, 6);
    listGraph.AddEdge(6, 4);

    mainBFS(listGraph, [](int vertex) { cout << vertex << " "; });
    cout << endl;

    MatrixGraph matrixgraph(listGraph);
    mainBFS(matrixgraph, [](int vertex) { cout << vertex << " "; });
    cout << endl;

    SetGraph setgraph(listGraph);
    mainBFS(setgraph, [](int vertex) { cout << vertex << " "; });
    cout << endl;

    ArcGraph arcgraph(listGraph);
    mainBFS(arcgraph, [](int vertex) { cout << vertex << " "; });
    cout << endl;


    return 0;
}
